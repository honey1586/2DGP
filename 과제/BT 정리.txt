Behavior Tree란 로직을 캡슐화함으로써 state의 모듈성을 증가시킨다. 같은 state를 재작성하지 않고도 다른 목적이나 상황에 따라 state를 재사용할 수 있도록 하기 위한 목적을 가지고 사용이 된다. HFSM에서도 제공이 되지만 transition이 존재하지 않는다는 차이점을 가지기 때문에 state는 그 독립적인 존재가 된다. 수업 시간에 다룬 Character Controller는 state가 키입력이나 다른 이벤트에 따라 변한다.

Behavior Tree를 구현하기 위해서는 Stack 자료구조를 사용하고, Task 집합으로 구성이 된다. FSM 류에서는 행동 집합을 state라고 하고 state가 다른 state로 넘어갈 수 있는 방향 및 조건을 지정하는 것을 transition이라고 표현하였는데, BT에서는 모든 것을 노드로 표현한다. BT 구현에 따라 조금씩 다르지만 Task의 종류는 크게 Composite,Decorator,Condition,Action 으로 나뉜다. Action은 단말 Task로서 FSM의 행동 집합으로써의 상태에 가깝다고 보면 된다. 보통 Task와 노드라는 용어는 같은 의미로 사용되는 경우가 많다.
◆Action task
Action task는 실제 행동을 표현하는 단말 노드이다. 항상 true 나 false를 반환하고, 일반적으로는 Action.OnStart(),Action.OnUpdate(),Action.OnEnd() 같은 메서드를 가지고 있는데, Action.Update() 에서 true나 false를 반환하면 그 Action의 작업이 끝이 난다. 
동작 원리
스택에 처음 올라갈 때 OnStart()가 불리고, true나 false를 반환하지 않으면 계속해서 OnUpdate()가 불린다. 그러다가 true나 false가 반환되면 스택에서 빠져나오면서 OnEnd()가 불린다. 구현에 따라 Action 종료에는 차이가 있지만 BT에서는 true,false,running과 같은 반환값으로 Action이 끝났는지 판단을 한다.
◆Composite task
Composite task는 여러 개의 자식으로 구성된 태스크이다. 자주 사용되는 Composite으로는 Select , Sequence 등이 있다. 이러한 Composite의 핵심 용도는 node의 flow를 제어하는 것이다. 기본적으로 노드의 실행 순서는 위->아래,왼->오인데, Select composite은 자식 노드가 true를 반환할 때까지 자식 노드들을 실행한다. 즉, 하나를 선택하는 것이다. Sequence composite은 자식 노드가 false를 반활할 때까지 자식 노드들을 실행하여 순차적 실행을 한다. 
◆Conditional Aborts
BT의 단말 노드에 존재하는 Action이 true나 false를 반환하지 않으면 계속해서 그 작업에 머물러 있게 된다. 그 Action의 OnUpdate() 메서드 내부에서 종료 조건을 판단할 수 있으면 좋겠지만 외부에서 강제적으로 그 Action 의 실행을 중단시켜야 하는 상황이 있을 수 있다. 이것을 조건부 취소라고 부른다. 조건부 취소는 실행 흐름에 영향을 주게 되므로 Composite에 기능이 내장되어 있어 어떤 변수의 값이 바뀌게 되면 지금의 실행 흐름을 취소시키고 자신의 노드로부터 재평가를 하는 것이다. Conditional Aborts는 보통 Self,Lower Priority,Both로 이루어진다. Self는 자신의 하위에 있는 태스크를 취소시키는 것이고, Lower Priority는 자신의 오른쪽에 있는 이웃 노드의 흐름을 취소시키는 것이다. 그리고 Both는 Self + Lower Priority 이다.
◆Decoration task
Decoration task 는 조건의 의미한다. Decoration은 하나의 자식만을 가질 수 있는데, 조건을 만족하면 자식을 실행하고, 조건을 만족하지 못하면 false를 반환한다. Decoration 이 지정하는 조건을 만족했을 경우의 반환 결과는 자식의 반환 결과에 의존한다. 자주 사용하는 Decoration에는 Probability,TimeOut,CheckEvent 등이 있다.